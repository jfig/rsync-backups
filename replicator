#!/bin/bash
#--

export RSYNCBACKUPS_FUNCTIONSFILE=$(pwd)"/functions"

# set env variables for "say" the output and logging function
# we'll be pretty verbose at this stage
# @TODO move this to a config file
export SAY_OUTPUT_SEVERITY = 1
export SAY_LOG_SEVERITY = 20
export SAY_DEFAULT_SEVERITY = 1

# for how many hours can the script run?
#   in this case set for 23 so a cron job can start every 24 hours
runForHours=23

#-------

# turn hours into seconds
timeLimit=$(( ${runForHours}*3600 + $(date +%s) ))

# save the script starting directory
startPoint=$(pwd)

# get the real name of the latest backup directory "latest" is
# just a symlink to it
OLDFLD=$(cd latest;pwd -P)

# determine the name for the new backup directory
NEWFLD=$(date +"%Y%m%d-%H%M")

#---
# copy the last backup to the new backup directory

say "Replicating previous backup..." 4
# copy using hard links so no "new" space is used in disk
cp -al $OLDFLD $NEWFLD

# replace the "latest" symlink to the new backup
rm latest; ln -s $NEWFLD latest
say "Replication complete, starting background backups...."  3


#---
# Start the background processes
#
# run a FOR loop on every subdirectory in "latest" and start a
# background backup process if a "sync" executable is present,
# store information on two arrays

declare -a PIDlist     # Will store the PIDs of the background backups
declare -a FolderList  # Will store the Directories names

for directory in $( ls -d latest/*/ )
do
  if [[ -x ${directory}/sync ]]
  then
    cd ${directory}
    say "Started: ${directory}" 4
    ./sync > output.log &
    PIDlist+=($!)
    FolderList+=($directory)

    cd ${startPoint}
  fi
done


#---
# wait for background processes to terminate and if needed,
# at the timelimit, forceffly terminate them

tC=${#PIDlist[@]} # totalCount
active=$tC

while true
do
  i=0
  while [[ $i -lt $tC ]]
  do
    if [[ ${PIDlist[${i}]} != ""  ]]
    then
      if ! kill -0 ${PIDlist[${i}]} > /dev/null 2>&1
      then
        say "Process ${FolderList[$i]} terminated" 4
        PIDlist[$i]=""
        ((active--))
      fi
    fi
    ((i++))
  done
  if [[ $active -eq 0 ]]
  then
    say "Backup process complete, exiting" 9
    exit
  fi
  if [[ $(date +%s) -gt $timeLimit ]]
  then
    say "Time Limit exceeded terminating remaining processes" 15
    i=0
    while [[ $i -lt $tC ]]
    do
      if [[ ${PIDlist[${i}]} != "" ]]
      then
        kill -9 ${PIDlist[${i}]}
        say "Terminated: ${FolderList[$i]} " 10
        sleep 1
      fi
      sleep 10 # wait for kernel to terminate processes
    done
    say "Backup process terminated, exiting" 9
    exit
  fi

  sleep 10 # sleep a while

done
