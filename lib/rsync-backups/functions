#!/bin/bash
#---
# Common Functions used by the rsyncBackups scripts

# test ssh connectivity to a server
# details on:  https://bitbucket.org/jfig/bash
# @param $1 Server
# @param $2 Port
function sshtest () {
	SERVER=$1
	[ -z $2 ] || PORT="-p $2"
	ssh $PORT -o BatchMode=yes -o ConnectTimeout=5 ${SERVER} echo OK / > /dev/null
	return $?
}

# output text
#
# Messages with "error" severity (above 20) are outputed to stdErr
#
# @param $1 Message
# @level $1 Severity of the Message
#     0     or null informative
#     1-9   informative
#     10-19 warning
#     20-xx error
#
# Assumed ENV variables
#  SAY_OUTPUT_SEVERITY  int minimal severity of a message to be outputed to stdOut
#  SAY_LOG_SEVERITY     int minimal severity of a message to be logged on syslog
#  SAY_DEFAULT_SEVERITY int default severity for messages if not passed by caller
say() {
	# if expected env variavles aren't set all messaes are echoed to both stdOut
	# or stdErr and logger
	[ -z $SAY_OUTPUT_SEVERITY ] && {
		export SAY_OUTPUT_SEVERITY=0
		say "SAY_OUTPUT_SEVERITY env variable not set all messages will be echoed to stdOut or stfErr" 10
	}
	[ -z $SAY_LOG_SEVERITY ] && {
		SAY_LOG_SEVERITY=0
		say "SAY_LOG_SEVERITY env variable not set all messages will be echoed to log" 10
	}
	[ -z $SAY_DEFAULT_SEVERITY ] && {
		SAY_DEFAULT_SEVERITY=5
		say "SAY_DEFAULT_SEVERITY env variable not set, default set to $SAY_DEFAULT_SEVERITY" 10
	}


	# exit with error if no message argument received
	{ [[ -z $1 ]] && return 1; } || message=$1
	#echo "message:" $message

	# set severity if argument received
	{ [ -z $2 ] || severity=$2; } || severity=$SAY_DEFAULT_SEVERITY
	#echo "severity:" $severity

	# change output to stdErr if Severity greater or equal to 20
	{ [[ $severity -ge 20 ]] && ch=2; } || ch=1
	#echo "channel:" $ch

	# do the actual output
	[[ $severity -ge $SAY_OUTPUT_SEVERITY ]] && >&${ch} echo $message
	[[ $severity -ge $SAY_LOG_SEVERITY ]] && logger -i  $message

	return 0
}

# test if a variable is an integer
# based on http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash
isInt() {
	re='^[0-9]+$'
	if ! [[ $1 =~ $re ]] ; then
	   return 1
	fi
	return 0
}

# get the mysqldump of a remote server and dump it to stdOut
# arguments
#  -s REMOTE_SERVER
#  -u USER           - database user
#  -p PASSWORD       - database password
mysqlBackup() {
	# read command line arguments and set options
	OPTIND=1
	while getopts "s:u:p:f:" opt; do
	  case "$opt" in
	    s)
	      REMOTE_SERVER=$OPTARG
	      ;;
	    u)
	      USER=$OPTARG
	      ;;
			p)
				PASSWORD=$OPTARG
				;;
	  esac
	done

	ssh ${REMOTE_SERVER} \
		"mysqldump \
			-u${USER} \
			--password=${PASSWORD} \
			--all-databases \
			--events "
	return $?
}
